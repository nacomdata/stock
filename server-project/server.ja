const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const app = express();
const PORT = 3000;

// Database setup
const db = new sqlite3.Database('./materials.db', (err) => {
  if (err) return console.error(err.message);
  console.log('Connected to SQLite database.');
});

// Create table if not exists
db.run(`CREATE TABLE IF NOT EXISTS materials (
  id TEXT PRIMARY KEY,
  name TEXT,
  unit TEXT,
  remarks TEXT,
  in_qty INTEGER DEFAULT 0,
  out_qty INTEGER DEFAULT 0
)`);

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Get all materials
app.get('/api/materials', (req, res) => {
  db.all('SELECT * FROM materials', [], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});

// Add new material
app.post('/api/materials', (req, res) => {
  const { id, name, unit, remarks } = req.body;
  db.run(
    'INSERT INTO materials (id, name, unit, remarks, in_qty, out_qty) VALUES (?, ?, ?, ?, 0, 0)',
    [id, name, unit, remarks],
    function (err) {
      if (err) return res.status(400).json({ error: 'Material ID exists or invalid data' });
      res.json({ success: true });
    }
  );
});

// Stock In
app.post('/api/stockin', (req, res) => {
  const { id, qty } = req.body;
  db.run(
    'UPDATE materials SET in_qty = in_qty + ? WHERE id = ?',
    [qty, id],
    function (err) {
      if (err || this.changes === 0) return res.status(404).json({ error: 'Material not found' });
      res.json({ success: true });
    }
  );
});

// Stock Out
app.post('/api/stockout', (req, res) => {
  const { id, qty } = req.body;
  db.get('SELECT in_qty, out_qty FROM materials WHERE id = ?', [id], (err, row) => {
    if (err || !row) return res.status(404).json({ error: 'Material not found' });
    if ((row.in_qty - row.out_qty) < qty) return res.status(400).json({ error: 'Not enough stock' });
    db.run(
      'UPDATE materials SET out_qty = out_qty + ? WHERE id = ?',
      [qty, id],
      function (err2) {
        if (err2) return res.status(500).json({ error: 'Update failed' });
        res.json({ success: true });
      }
    );
  });
});

// Delete material
app.delete('/api/materials/:id', (req, res) => {
  db.run('DELETE FROM materials WHERE id = ?', [req.params.id], function (err) {
    if (err || this.changes === 0) return res.status(404).json({ error: 'Material not found' });
    res.json({ success: true });
  });
});

app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));